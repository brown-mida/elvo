import logging

import keras
from sklearn import model_selection

import generators.luke
import models.luke

BLUENO_HOME = '/home/lzhu7/elvo-analysis/'
# DELIBERATELY OMIT SLACK TOKEN
# TODO: Store in encrypted file instead
SLACK_TOKEN = ''
NUM_GPUS = 4
NUM_ITERS = 100


def configure_parent_logger():
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)  # TODO: Customize log level
    handler = logging.StreamHandler()
    formatter = logging.Formatter(
        fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    root_logger.addHandler(handler)


def configure_job_logger(filename):
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)  # TODO: Customize log level
    handler = logging.FileHandler(filename)
    formatter = logging.Formatter(
        fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    root_logger.addHandler(handler)


# TODO: Consider turning the dict into a class for better attribute clarity
# All top-level values should be lists
arguments = {
    # TODO: Add preprocessing tuning
    # 'preprocessing': [],
    'data': [
        {
            # A directory containing a list of numpy files with
            # patient ID as their filename
            'data_dir': '/home/lzhu7/elvo-analysis/data/'
                        'processed-standard/arrays/',
            # A CSV file generated by saving a pandas DataFrame
            'labels_path': '/home/lzhu7/elvo-analysis/data/'
                           'processed-standard/labels.csv',
            'index_col': 'Anon ID',
            'label_col': 'occlusion_exists',
        },
        {
            'data_dir': '/home/lzhu7/elvo-analysis/data/'
                        'processed-no-basvert/arrays/',
            'labels_path': '/home/lzhu7/elvo-analysis/data/'
                           'processed-no-basvert/labels.csv',
            'index_col': 'Anon ID',
            'label_col': 'occlusion_exists',
        },
        {
            'data_dir': '/home/lzhu7/elvo-analysis/data/'
                        'mip_transform/',
            # TODO: This is not ideal
            'labels_path': '/home/lzhu7/elvo-analysis/data/'
                           'processed-standard/labels.csv',
            'index_col': 'Anon ID',
            'label_col': 'occlusion_exists',
        },
        {
            'data_dir': '/home/lzhu7/elvo-analysis/data/'
                        'processed-lower/arrays/',
            'labels_path': '/home/lzhu7/elvo-analysis/data/'
                           'processed-lower/labels.csv',
            'index_col': 'Anon ID',
            'label_col': 'occlusion_exists',
        },
        {
            # A directory containing a list of numpy files with
            # patient ID as their filename
            'data_dir': '/home/lzhu7/elvo-analysis/data/'
                        'processed-standard/arrays/',
            # A CSV file generated by saving a pandas DataFrame
            'labels_path': '/home/lzhu7/elvo-analysis/data/'
                           'processed-standard/labels.csv',
            'index_col': 'Anon ID',
            'label_col': 'Location of occlusions on CTA (Matt verified)',
        },
        {
            # A directory containing a list of numpy files with
            # patient ID as their filename
            'data_dir': '/home/lzhu7/elvo-analysis/data/'
                        'processed-no-basvert/arrays/',
            # A CSV file generated by saving a pandas DataFrame
            'labels_path': '/home/lzhu7/elvo-analysis/data/'
                           'processed-no-basvert/labels.csv',
            'index_col': 'Anon ID',
            'label_col': 'Location of occlusions on CTA (Matt verified)',
        },
    ],

    # TODO: Once models are good
    # 'model_save_path': f'/home/lzhu7/elvo-analysis/models/'
    #                    f'model-{int(time.time())}.hdf5',

    'seed': [42, 0],
    'val_split': [0.2],  # 0.3],

    'generator': [
        generators.luke.standard_generators,
    ],

    'model': model_selection.ParameterGrid({
        # The callable must take in **kwargs as an argument
        'model_callable': [models.luke.resnet,
                           models.luke.inception,
                           models.luke.inception_resnet],
        'dropout_rate1': [0.8],
        'dropout_rate2': [0.7, 0.8],
        # TODO: These are coupled with the generator too
        'batch_size': [8, 32],
        'rotation_range': [20],  # , 30],
        'optimizer': [
            keras.optimizers.Adam(lr=1e-4),
            keras.optimizers.Adam(lr=1e-5),
            # TODO: Learning rate seems too low
            # keras.optimizers.SGD(lr=1e-5, momentum=0.9)
        ],
        'loss': [
            keras.losses.categorical_crossentropy,
            keras.losses.binary_crossentropy,
        ]
    }),
}
